// Code generated by Boiler; YOU MUST CHANGE THIS.

syntax = "proto3";

package loghouse;

option go_package = "github.com/ushakovn-org/loghouse/internal/pb/loghouse;loghouse";

// Use proto imports:
//   Execute:   boiler proto-deps init & boiler proto-deps gen --github-token=<GITHUB_TOKEN>;
//   Uncomment: imports declarations.

import "proto/ushakovn-org/protobuf/validate/validate.proto";
import "proto/ushakovn-org/protobuf/protobuf/timestamp.proto";
import "proto/ushakovn-org/protobuf/protobuf/duration.proto";

// import "proto/ushakovn-org/protobuf/api/annotations.proto";

// Сервис логов
service LogHouse {
  // Асинхронно создает лог обработки запроса
  rpc CreateLogAsync(CreateLogAsyncRequest) returns (CreateLogAsyncResponse);
}

message CreateLogAsyncRequest {
  // Транспорт сервиса
  Transport transport = 1 [(validate.rules).enum.defined_only = true];
  // Эндпоинт запроса к сервису
  string endpoint = 2 [(validate.rules).string.min_len = 1];
  // Идентификатор трассировки
  optional string trace_id = 3;
  // Заголовки запроса
  map<string, string> request_headers = 4 [
    (validate.rules).map.keys.string.min_len = 1,
    (validate.rules).map.values.string.min_len = 1
  ];
  // Заголовки ответа
  map<string, string> response_headers = 5 [
    (validate.rules).map.keys.string.min_len = 1,
    (validate.rules).map.values.string.min_len = 1
  ];
  // Тело запроса
  string request_body = 6 [(validate.rules).string.min_len = 1];
  // Тело ответа
  optional string response_body = 7 [(validate.rules).string.min_len = 1];
  // Текст ошибки
  optional string error_message = 8;
  // Код ответа
  optional int32 response_status_code = 9;
  // Текстовый код ответа
  optional string response_status_code_string = 10;
  // Время отправки запроса
  optional protobuf.Timestamp request_send_time = 20 [(validate.rules).timestamp.lt_now = true];
  // Время отправки ответа
  optional protobuf.Timestamp response_send_time = 21 [(validate.rules).timestamp.lt_now = true];
  // Время обработки запроса
  optional string latency = 22 [(validate.rules).string.min_len = 1];
  // Запрос к сервису завершился успешно
  bool is_success = 23;
}

// Лог создается асинхронно
message CreateLogAsyncResponse {}

enum Transport {
  // Неизвестный транспорт
  TRANSPORT_UNKNOWN = 0;
  // gRPC (HTTP 2.0)
  TRANSPORT_GRPC = 1;
  // GraphQL (HTTP 1.0)
  TRANSPORT_GRAPHQL = 2;
  // HTTP (HTTP 1.0)
  TRANSPORT_HTTP = 3;
}

message Log {
  // Транспорт сервиса
  Transport transport = 1;
  // Идентификатор трассировки
  optional string trace_id = 2;
  // Заголовки запроса
  map<string, string> request_headers = 3;
  // Тело запроса
  string request_body = 4;
  // Тело ответа
  string response_body = 5;
  // Время отправки запроса
  optional protobuf.Timestamp request_send_time = 6;
  // Время отправки ответа
  optional protobuf.Timestamp response_send_time = 7;
  // Время обработки запроса
  optional string latency = 8;
}
