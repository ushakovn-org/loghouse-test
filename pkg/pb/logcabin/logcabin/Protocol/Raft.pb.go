// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.0
// source: proto/logcabin/logcabin/Protocol/Raft.proto

// Copyright (c) 2012 Stanford University
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR(S) DISCLAIM ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL AUTHORS BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

package Protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Identifies which RPC is being executed.
type OpCode int32

const (
	// Keep these numbers dense.
	OpCode_REQUEST_VOTE     OpCode = 1
	OpCode_APPEND_ENTRIES   OpCode = 2
	OpCode_INSTALL_SNAPSHOT OpCode = 3
)

// Enum value maps for OpCode.
var (
	OpCode_name = map[int32]string{
		1: "REQUEST_VOTE",
		2: "APPEND_ENTRIES",
		3: "INSTALL_SNAPSHOT",
	}
	OpCode_value = map[string]int32{
		"REQUEST_VOTE":     1,
		"APPEND_ENTRIES":   2,
		"INSTALL_SNAPSHOT": 3,
	}
)

func (x OpCode) Enum() *OpCode {
	p := new(OpCode)
	*p = x
	return p
}

func (x OpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_enumTypes[0].Descriptor()
}

func (OpCode) Type() protoreflect.EnumType {
	return &file_proto_logcabin_logcabin_Protocol_Raft_proto_enumTypes[0]
}

func (x OpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpCode(num)
	return nil
}

// Deprecated: Use OpCode.Descriptor instead.
func (OpCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{0}
}

// *
// The type of payload stored in a log entry.
type EntryType int32

const (
	// *
	// This must be the first value in the enum and is never assigned
	// explicitly. If new values are added, old code will see them as set
	// and equal to this value (though they will still serialize to the
	// correct value).
	EntryType_UNKNOWN EntryType = 0
	// *
	// Stores a 'Configuration', to be used internally by the consensus module.
	EntryType_CONFIGURATION EntryType = 1
	// *
	// Stores a command to be processed by the state machine.
	EntryType_DATA EntryType = 2
	// *
	// No op.
	EntryType_NOOP EntryType = 3
)

// Enum value maps for EntryType.
var (
	EntryType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONFIGURATION",
		2: "DATA",
		3: "NOOP",
	}
	EntryType_value = map[string]int32{
		"UNKNOWN":       0,
		"CONFIGURATION": 1,
		"DATA":          2,
		"NOOP":          3,
	}
)

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_enumTypes[1].Descriptor()
}

func (EntryType) Type() protoreflect.EnumType {
	return &file_proto_logcabin_logcabin_Protocol_Raft_proto_enumTypes[1]
}

func (x EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntryType(num)
	return nil
}

// Deprecated: Use EntryType.Descriptor instead.
func (EntryType) EnumDescriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{1}
}

// *
// The type of "service-specific error" replies that this service returns.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{0}
}

// *
// A server in a configuration.
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The ID of the server.
	ServerId *uint64 `protobuf:"varint,1,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	// *
	// The network address(es) of the server (comma-delimited).
	Addresses *string `protobuf:"bytes,2,req,name=addresses" json:"addresses,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{1}
}

func (x *Server) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *Server) GetAddresses() string {
	if x != nil && x.Addresses != nil {
		return *x.Addresses
	}
	return ""
}

// *
// A stable configuraton, in which a simple majority constitutes a quorum.
type SimpleConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *SimpleConfiguration) Reset() {
	*x = SimpleConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleConfiguration) ProtoMessage() {}

func (x *SimpleConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleConfiguration.ProtoReflect.Descriptor instead.
func (*SimpleConfiguration) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleConfiguration) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// *
// A stable or transitional configuration.
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The servers in a stable configuration, or the old servers in a
	// transitional configuration.
	PrevConfiguration *SimpleConfiguration `protobuf:"bytes,1,req,name=prev_configuration,json=prevConfiguration" json:"prev_configuration,omitempty"`
	// *
	// Not present in a stable configuration, or the new servers in a
	// transitional configuration.
	NextConfiguration *SimpleConfiguration `protobuf:"bytes,2,opt,name=next_configuration,json=nextConfiguration" json:"next_configuration,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{3}
}

func (x *Configuration) GetPrevConfiguration() *SimpleConfiguration {
	if x != nil {
		return x.PrevConfiguration
	}
	return nil
}

func (x *Configuration) GetNextConfiguration() *SimpleConfiguration {
	if x != nil {
		return x.NextConfiguration
	}
	return nil
}

// *
// Log entry.
type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The term in which the entry was first created.
	Term *uint64 `protobuf:"varint,1,req,name=term" json:"term,omitempty"`
	// *
	// The index for the entry. It's truly optional (if you receive an entry
	// over the network, you shouldn't rely on this). It's used for followers
	// to check that they've got the entry at the right index and also used
	// internally in some storage backends such as SegmentedLog.
	Index *uint64 `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	// *
	// Roughly the number of nanoseconds the cluster has had a leader. This
	// gets passed onto state machines, where it's used for cleaning up client
	// sessions. See ClusterClock for more details.
	ClusterTime *uint64 `protobuf:"varint,6,req,name=cluster_time,json=clusterTime" json:"cluster_time,omitempty"`
	// *
	// See EntryType.
	Type *EntryType `protobuf:"varint,2,opt,name=type,enum=LogCabin.Protocol.Raft.EntryType" json:"type,omitempty"` // the following are mutually exclusive, depending on 'type'
	// *
	// A Configuration to be used internally by the consensus module.
	Configuration *Configuration `protobuf:"bytes,3,opt,name=configuration" json:"configuration,omitempty"`
	// *
	// A command to be processed by the state machine.
	Data []byte `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{4}
}

func (x *Entry) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *Entry) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Entry) GetClusterTime() uint64 {
	if x != nil && x.ClusterTime != nil {
		return *x.ClusterTime
	}
	return 0
}

func (x *Entry) GetType() EntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EntryType_UNKNOWN
}

func (x *Entry) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Entry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// RequestVote RPC: ask a server for its vote in an election and/or get a
// server's log information.
type RequestVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestVote) Reset() {
	*x = RequestVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVote) ProtoMessage() {}

func (x *RequestVote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVote.ProtoReflect.Descriptor instead.
func (*RequestVote) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{5}
}

// *
// AppendEntries RPC: replicate log entries to a follower.
type AppendEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AppendEntries) Reset() {
	*x = AppendEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntries) ProtoMessage() {}

func (x *AppendEntries) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntries.ProtoReflect.Descriptor instead.
func (*AppendEntries) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{6}
}

// *
// InstallSnapshot RPC: replicate part of a snapshot file to a follower.
type InstallSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstallSnapshot) Reset() {
	*x = InstallSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshot) ProtoMessage() {}

func (x *InstallSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshot.ProtoReflect.Descriptor instead.
func (*InstallSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{7}
}

type RequestVote_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// ID of the caller, so that if it re-requests the vote from the
	// callee, the server will respond granted.
	ServerId *uint64 `protobuf:"varint,1,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	// *
	// Caller's term.
	Term *uint64 `protobuf:"varint,2,req,name=term" json:"term,omitempty"`
	// *
	// Term of last entry in caller's log.
	// Used to compare log completeness.
	LastLogTerm *uint64 `protobuf:"varint,3,req,name=last_log_term,json=lastLogTerm" json:"last_log_term,omitempty"`
	// *
	// ID of last entry in caller's log.
	// Used to compare log completeness.
	LastLogIndex *uint64 `protobuf:"varint,4,req,name=last_log_index,json=lastLogIndex" json:"last_log_index,omitempty"`
}

func (x *RequestVote_Request) Reset() {
	*x = RequestVote_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVote_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVote_Request) ProtoMessage() {}

func (x *RequestVote_Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVote_Request.ProtoReflect.Descriptor instead.
func (*RequestVote_Request) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RequestVote_Request) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *RequestVote_Request) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *RequestVote_Request) GetLastLogTerm() uint64 {
	if x != nil && x.LastLogTerm != nil {
		return *x.LastLogTerm
	}
	return 0
}

func (x *RequestVote_Request) GetLastLogIndex() uint64 {
	if x != nil && x.LastLogIndex != nil {
		return *x.LastLogIndex
	}
	return 0
}

type RequestVote_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Callee's term, for caller to update itself.
	Term *uint64 `protobuf:"varint,1,req,name=term" json:"term,omitempty"`
	// *
	// True if the follower granted the candidate its vote, false
	// otherwise.
	Granted *bool `protobuf:"varint,2,req,name=granted" json:"granted,omitempty"`
	// *
	// Set to true if the caller's log is as up-to-date as the recipient's.
	// This isn't presently used, but it's easy to return and might be
	// useful later. In the Pre-Vote extension to Raft described in Section
	// 9.6 "Preventing disruptions when a server rejoins the cluster" of
	// Diego Ongaro's PhD dissertation, a server needs to know if its log
	// is sufficient to get elected before actually starting an election.
	LogOk *bool `protobuf:"varint,3,opt,name=log_ok,json=logOk" json:"log_ok,omitempty"`
}

func (x *RequestVote_Response) Reset() {
	*x = RequestVote_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestVote_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVote_Response) ProtoMessage() {}

func (x *RequestVote_Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVote_Response.ProtoReflect.Descriptor instead.
func (*RequestVote_Response) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{5, 1}
}

func (x *RequestVote_Response) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *RequestVote_Response) GetGranted() bool {
	if x != nil && x.Granted != nil {
		return *x.Granted
	}
	return false
}

func (x *RequestVote_Response) GetLogOk() bool {
	if x != nil && x.LogOk != nil {
		return *x.LogOk
	}
	return false
}

type AppendEntries_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// ID of leader (caller), so the follower can redirect clients.
	ServerId *uint64 `protobuf:"varint,1,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	// *
	// Caller's term.
	Term *uint64 `protobuf:"varint,2,req,name=term" json:"term,omitempty"`
	// *
	// ID of entry preceding entries, or ID of last log entry for
	// heartbeat.
	PrevLogIndex *uint64 `protobuf:"varint,3,req,name=prev_log_index,json=prevLogIndex" json:"prev_log_index,omitempty"`
	// *
	// Term of prev_log_index.
	PrevLogTerm *uint64 `protobuf:"varint,4,req,name=prev_log_term,json=prevLogTerm" json:"prev_log_term,omitempty"`
	// *
	// Log entries for follower to store, or empty for heartbeat.
	Entries []*Entry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	// *
	// Last committed entry that the follower has, so the follower can
	// advance its state machine.
	CommitIndex *uint64 `protobuf:"varint,6,req,name=commit_index,json=commitIndex" json:"commit_index,omitempty"`
}

func (x *AppendEntries_Request) Reset() {
	*x = AppendEntries_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntries_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntries_Request) ProtoMessage() {}

func (x *AppendEntries_Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntries_Request.ProtoReflect.Descriptor instead.
func (*AppendEntries_Request) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{6, 0}
}

func (x *AppendEntries_Request) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *AppendEntries_Request) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *AppendEntries_Request) GetPrevLogIndex() uint64 {
	if x != nil && x.PrevLogIndex != nil {
		return *x.PrevLogIndex
	}
	return 0
}

func (x *AppendEntries_Request) GetPrevLogTerm() uint64 {
	if x != nil && x.PrevLogTerm != nil {
		return *x.PrevLogTerm
	}
	return 0
}

func (x *AppendEntries_Request) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *AppendEntries_Request) GetCommitIndex() uint64 {
	if x != nil && x.CommitIndex != nil {
		return *x.CommitIndex
	}
	return 0
}

type AppendEntries_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Callee's term, for the caller to update itself.
	Term *uint64 `protobuf:"varint,1,req,name=term" json:"term,omitempty"`
	// *
	// True if new entries were added to the log.
	Success *bool `protobuf:"varint,2,req,name=success" json:"success,omitempty"`
	// *
	// The recipient's last log index (after it's applied this RPC's
	// changes to the log). This is used to speed up finding the correct
	// value for nextIndex with a follower that is far behind the leader.
	LastLogIndex *uint64 `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex" json:"last_log_index,omitempty"`
	// *
	// Sent back to inform leader of what code the recipient is running.
	ServerCapabilities *AppendEntries_Response_ServerCapabilities `protobuf:"bytes,4,opt,name=server_capabilities,json=serverCapabilities" json:"server_capabilities,omitempty"`
}

func (x *AppendEntries_Response) Reset() {
	*x = AppendEntries_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntries_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntries_Response) ProtoMessage() {}

func (x *AppendEntries_Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntries_Response.ProtoReflect.Descriptor instead.
func (*AppendEntries_Response) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{6, 1}
}

func (x *AppendEntries_Response) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *AppendEntries_Response) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *AppendEntries_Response) GetLastLogIndex() uint64 {
	if x != nil && x.LastLogIndex != nil {
		return *x.LastLogIndex
	}
	return 0
}

func (x *AppendEntries_Response) GetServerCapabilities() *AppendEntries_Response_ServerCapabilities {
	if x != nil {
		return x.ServerCapabilities
	}
	return nil
}

type AppendEntries_Response_ServerCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The server's state machine can behave like all state machine
	// versions between min_supported_state_machine_version and
	// max_supported_state_machine_version, inclusive.
	MinSupportedStateMachineVersion *uint32 `protobuf:"varint,1,opt,name=min_supported_state_machine_version,json=minSupportedStateMachineVersion" json:"min_supported_state_machine_version,omitempty"`
	// *
	// The server's state machine can behave like all state machine
	// versions between min_supported_state_machine_version and
	// max_supported_state_machine_version, inclusive.
	MaxSupportedStateMachineVersion *uint32 `protobuf:"varint,2,opt,name=max_supported_state_machine_version,json=maxSupportedStateMachineVersion" json:"max_supported_state_machine_version,omitempty"`
}

func (x *AppendEntries_Response_ServerCapabilities) Reset() {
	*x = AppendEntries_Response_ServerCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntries_Response_ServerCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntries_Response_ServerCapabilities) ProtoMessage() {}

func (x *AppendEntries_Response_ServerCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntries_Response_ServerCapabilities.ProtoReflect.Descriptor instead.
func (*AppendEntries_Response_ServerCapabilities) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{6, 1, 0}
}

func (x *AppendEntries_Response_ServerCapabilities) GetMinSupportedStateMachineVersion() uint32 {
	if x != nil && x.MinSupportedStateMachineVersion != nil {
		return *x.MinSupportedStateMachineVersion
	}
	return 0
}

func (x *AppendEntries_Response_ServerCapabilities) GetMaxSupportedStateMachineVersion() uint32 {
	if x != nil && x.MaxSupportedStateMachineVersion != nil {
		return *x.MaxSupportedStateMachineVersion
	}
	return 0
}

type InstallSnapshot_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// ID of leader (caller), so the follower can redirect clients.
	ServerId *uint64 `protobuf:"varint,1,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	// *
	// Caller's term.
	Term *uint64 `protobuf:"varint,3,req,name=term" json:"term,omitempty"`
	// *
	// The snapshot covers log entries in the range [1, lastSnapshotIndex].
	// While this information can be found in the snapshot itself, a
	// follower may want to know sooner (for example, to name the snapshot
	// file or to assert that it's not overwriting something more
	// important).
	LastSnapshotIndex *uint64 `protobuf:"varint,4,req,name=last_snapshot_index,json=lastSnapshotIndex" json:"last_snapshot_index,omitempty"`
	// *
	// The byte offset where 'data' belongs in the file. Followers can
	// expect this to grow without gaps, but they should use this to drop
	// duplicate request messages.
	ByteOffset *uint64 `protobuf:"varint,5,req,name=byte_offset,json=byteOffset" json:"byte_offset,omitempty"`
	// *
	// Raw bytes of the snapshot file. This should be big enough to achieve
	// reasonable throughput without having to pipeline RPCs.
	Data []byte `protobuf:"bytes,6,req,name=data" json:"data,omitempty"`
	// *
	// Set to true if this is the last chunk of the file and the follower
	// should now load the contents; false otherwise.
	Done *bool `protobuf:"varint,7,req,name=done" json:"done,omitempty"`
	// *
	// Explains which version of this RPC the leader (caller) supports.
	//   - Servers speaking version 1 of this RPC (corresponding to LogCabin
	//     release v1.0.0 and up to a few weeks after) did not set this
	//     field.
	//   - Version 2 introduced the bytes_stored field in responses. Before
	//     this, leaders assumed that InstallSnapshot always succeeded if the
	//     term matched.
	Version *uint32 `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
}

func (x *InstallSnapshot_Request) Reset() {
	*x = InstallSnapshot_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallSnapshot_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshot_Request) ProtoMessage() {}

func (x *InstallSnapshot_Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshot_Request.ProtoReflect.Descriptor instead.
func (*InstallSnapshot_Request) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{7, 0}
}

func (x *InstallSnapshot_Request) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *InstallSnapshot_Request) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *InstallSnapshot_Request) GetLastSnapshotIndex() uint64 {
	if x != nil && x.LastSnapshotIndex != nil {
		return *x.LastSnapshotIndex
	}
	return 0
}

func (x *InstallSnapshot_Request) GetByteOffset() uint64 {
	if x != nil && x.ByteOffset != nil {
		return *x.ByteOffset
	}
	return 0
}

func (x *InstallSnapshot_Request) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InstallSnapshot_Request) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *InstallSnapshot_Request) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type InstallSnapshot_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Callee's term, for the caller to update itself.
	Term *uint64 `protobuf:"varint,1,req,name=term" json:"term,omitempty"`
	// *
	// The total number of bytes in the snapshot that the follower has
	// stored (after applying the request).
	//
	// This was introduced to fix
	// https://github.com/logcabin/logcabin/issues/174 .
	// Before, followers could only receive snapshot chunks in sequence. If
	// they restarted, they'd have discarded their previous chunks and they
	// would just repeatedly PANIC. This is now used to signal to the
	// leader how many bytes the follower actually has saved. The leader
	// considers the snapshot transfer complete when bytes_stored equals
	// the full size of the snapshot. The leader should use bytes_stored
	// as the value for byte_offset in the next request (most importantly,
	// when a follower reboots, it returns 0 here and the leader starts at
	// offset 0 in the next request).
	//
	// Leaders that do not support InstallSnapshot version 2 entirely
	// ignore this field.
	BytesStored *uint64 `protobuf:"varint,2,opt,name=bytes_stored,json=bytesStored" json:"bytes_stored,omitempty"`
}

func (x *InstallSnapshot_Response) Reset() {
	*x = InstallSnapshot_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallSnapshot_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshot_Response) ProtoMessage() {}

func (x *InstallSnapshot_Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshot_Response.ProtoReflect.Descriptor instead.
func (*InstallSnapshot_Response) Descriptor() ([]byte, []int) {
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP(), []int{7, 1}
}

func (x *InstallSnapshot_Response) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *InstallSnapshot_Response) GetBytesStored() uint64 {
	if x != nil && x.BytesStored != nil {
		return *x.BytesStored
	}
	return 0
}

var File_proto_logcabin_logcabin_Protocol_Raft_proto protoreflect.FileDescriptor

var file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x63, 0x61, 0x62, 0x69, 0x6e,
	0x2f, 0x6c, 0x6f, 0x67, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x4c,
	0x6f, 0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x43,
	0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec,
	0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x1a, 0x84, 0x01,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0x4f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6c, 0x6f, 0x67, 0x4f, 0x6b, 0x22, 0xfa, 0x04, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x37,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x85, 0x03, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x72, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x61,
	0x62, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0xb0, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6d, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0xcd, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x2a, 0x44, 0x0a, 0x06, 0x4f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56,
	0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x03, 0x2a,
	0x3f, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x03,
}

var (
	file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescOnce sync.Once
	file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescData = file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDesc
)

func file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescGZIP() []byte {
	file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescOnce.Do(func() {
		file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescData)
	})
	return file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDescData
}

var file_proto_logcabin_logcabin_Protocol_Raft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_logcabin_logcabin_Protocol_Raft_proto_goTypes = []interface{}{
	(OpCode)(0),                                       // 0: LogCabin.Protocol.Raft.OpCode
	(EntryType)(0),                                    // 1: LogCabin.Protocol.Raft.EntryType
	(*Error)(nil),                                     // 2: LogCabin.Protocol.Raft.Error
	(*Server)(nil),                                    // 3: LogCabin.Protocol.Raft.Server
	(*SimpleConfiguration)(nil),                       // 4: LogCabin.Protocol.Raft.SimpleConfiguration
	(*Configuration)(nil),                             // 5: LogCabin.Protocol.Raft.Configuration
	(*Entry)(nil),                                     // 6: LogCabin.Protocol.Raft.Entry
	(*RequestVote)(nil),                               // 7: LogCabin.Protocol.Raft.RequestVote
	(*AppendEntries)(nil),                             // 8: LogCabin.Protocol.Raft.AppendEntries
	(*InstallSnapshot)(nil),                           // 9: LogCabin.Protocol.Raft.InstallSnapshot
	(*RequestVote_Request)(nil),                       // 10: LogCabin.Protocol.Raft.RequestVote.Request
	(*RequestVote_Response)(nil),                      // 11: LogCabin.Protocol.Raft.RequestVote.Response
	(*AppendEntries_Request)(nil),                     // 12: LogCabin.Protocol.Raft.AppendEntries.Request
	(*AppendEntries_Response)(nil),                    // 13: LogCabin.Protocol.Raft.AppendEntries.Response
	(*AppendEntries_Response_ServerCapabilities)(nil), // 14: LogCabin.Protocol.Raft.AppendEntries.Response.ServerCapabilities
	(*InstallSnapshot_Request)(nil),                   // 15: LogCabin.Protocol.Raft.InstallSnapshot.Request
	(*InstallSnapshot_Response)(nil),                  // 16: LogCabin.Protocol.Raft.InstallSnapshot.Response
}
var file_proto_logcabin_logcabin_Protocol_Raft_proto_depIdxs = []int32{
	3,  // 0: LogCabin.Protocol.Raft.SimpleConfiguration.servers:type_name -> LogCabin.Protocol.Raft.Server
	4,  // 1: LogCabin.Protocol.Raft.Configuration.prev_configuration:type_name -> LogCabin.Protocol.Raft.SimpleConfiguration
	4,  // 2: LogCabin.Protocol.Raft.Configuration.next_configuration:type_name -> LogCabin.Protocol.Raft.SimpleConfiguration
	1,  // 3: LogCabin.Protocol.Raft.Entry.type:type_name -> LogCabin.Protocol.Raft.EntryType
	5,  // 4: LogCabin.Protocol.Raft.Entry.configuration:type_name -> LogCabin.Protocol.Raft.Configuration
	6,  // 5: LogCabin.Protocol.Raft.AppendEntries.Request.entries:type_name -> LogCabin.Protocol.Raft.Entry
	14, // 6: LogCabin.Protocol.Raft.AppendEntries.Response.server_capabilities:type_name -> LogCabin.Protocol.Raft.AppendEntries.Response.ServerCapabilities
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_logcabin_logcabin_Protocol_Raft_proto_init() }
func file_proto_logcabin_logcabin_Protocol_Raft_proto_init() {
	if File_proto_logcabin_logcabin_Protocol_Raft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVote_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestVote_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntries_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntries_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntries_Response_ServerCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallSnapshot_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallSnapshot_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_logcabin_logcabin_Protocol_Raft_proto_goTypes,
		DependencyIndexes: file_proto_logcabin_logcabin_Protocol_Raft_proto_depIdxs,
		EnumInfos:         file_proto_logcabin_logcabin_Protocol_Raft_proto_enumTypes,
		MessageInfos:      file_proto_logcabin_logcabin_Protocol_Raft_proto_msgTypes,
	}.Build()
	File_proto_logcabin_logcabin_Protocol_Raft_proto = out.File
	file_proto_logcabin_logcabin_Protocol_Raft_proto_rawDesc = nil
	file_proto_logcabin_logcabin_Protocol_Raft_proto_goTypes = nil
	file_proto_logcabin_logcabin_Protocol_Raft_proto_depIdxs = nil
}
