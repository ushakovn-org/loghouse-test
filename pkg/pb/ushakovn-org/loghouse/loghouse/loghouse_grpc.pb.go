// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: proto/ushakovn-org/loghouse/loghouse/loghouse.proto

package loghouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogHouseClient is the client API for LogHouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogHouseClient interface {
	// Асинхронно создает лог обработки запроса
	CreateLogAsync(ctx context.Context, in *CreateLogAsyncRequest, opts ...grpc.CallOption) (*CreateLogAsyncResponse, error)
}

type logHouseClient struct {
	cc grpc.ClientConnInterface
}

func NewLogHouseClient(cc grpc.ClientConnInterface) LogHouseClient {
	return &logHouseClient{cc}
}

func (c *logHouseClient) CreateLogAsync(ctx context.Context, in *CreateLogAsyncRequest, opts ...grpc.CallOption) (*CreateLogAsyncResponse, error) {
	out := new(CreateLogAsyncResponse)
	err := c.cc.Invoke(ctx, "/loghouse.LogHouse/CreateLogAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogHouseServer is the server API for LogHouse service.
// All implementations must embed UnimplementedLogHouseServer
// for forward compatibility
type LogHouseServer interface {
	// Асинхронно создает лог обработки запроса
	CreateLogAsync(context.Context, *CreateLogAsyncRequest) (*CreateLogAsyncResponse, error)
	mustEmbedUnimplementedLogHouseServer()
}

// UnimplementedLogHouseServer must be embedded to have forward compatible implementations.
type UnimplementedLogHouseServer struct {
}

func (UnimplementedLogHouseServer) CreateLogAsync(context.Context, *CreateLogAsyncRequest) (*CreateLogAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogAsync not implemented")
}
func (UnimplementedLogHouseServer) mustEmbedUnimplementedLogHouseServer() {}

// UnsafeLogHouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogHouseServer will
// result in compilation errors.
type UnsafeLogHouseServer interface {
	mustEmbedUnimplementedLogHouseServer()
}

func RegisterLogHouseServer(s grpc.ServiceRegistrar, srv LogHouseServer) {
	s.RegisterService(&LogHouse_ServiceDesc, srv)
}

func _LogHouse_CreateLogAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogHouseServer).CreateLogAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loghouse.LogHouse/CreateLogAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogHouseServer).CreateLogAsync(ctx, req.(*CreateLogAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogHouse_ServiceDesc is the grpc.ServiceDesc for LogHouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogHouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loghouse.LogHouse",
	HandlerType: (*LogHouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogAsync",
			Handler:    _LogHouse_CreateLogAsync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ushakovn-org/loghouse/loghouse/loghouse.proto",
}
